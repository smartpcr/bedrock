trigger: none

schedules:
- cron: "0 12 * * 5"
  branches:
    include: [master]
  # Uncomment below if we want builds to run when the code has NOT changed
  always: false 

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.13' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

stages:
- stage: Bedrock_Init_Validation
  jobs:
  - job: Bedrock_Init_Validate
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    - template: bedrock-integration-test-whitelist.yml
    - task: ShellScript@2
      displayName: Validate GitOps pipeline
      inputs:
        scriptPath: gitops/azure-devops/build.sh
      env:
        VERIFY_ONLY: 1
        HLD_PATH: git://github.com/Microsoft/fabrikate-production-cluster-demo.git
    - template: bedrock-test-init.yml
    - bash: |
        # Fail if any of these files have warnings
        find . -path ./gopath -prune -o -path ./get_helm.sh -prune -o -type f \( -name "*.sh" -o -name "*.bash" -o -name "*.ksh" \) -print |
          while IFS="" read -r file
          do
            shellcheck "$file"
          done
      displayName: 'Run Shell Linting (ShellCheck)'
    - script: |
        terraform fmt -check=true -write=false -list=true > /dev/null
        if [ $? -eq 0 ]
        then
          echo "Bedrock_Linting: All terraform files are valid."
        else
          echo "Bedrock_Linting: Terraform files invalid format, submit new commit with changes (run terraform fmt)."
          exit 1
        fi
        gofmt -d ../bedrock/test/ | grep "^@@.*@@" > /dev/null
        if [ "$?" -eq "1" ]; then
          echo "Bedrock_Linting: All golang files are valid."
        else
          go fmt ../bedrock/test/
          echo "Bedrock_Linting: Golang files invalid format, submit new commit with changes (run gofmt in /test/ directory)."
          exit 1
        fi
      workingDirectory: '$(modulePath)/cluster'
      displayName: 'Terraform lint check'
    - bash: |
        AZ_SIMPLE_TEST=$(Whitelist_Bedrock.AZ_SIMPLE_TEST)
        AZ_COMMON_MC_TEST=$(Whitelist_Bedrock.AZ_COMMON_MC_TEST)
        ALL_IT_TESTS=$(Whitelist_Bedrock.ALL_IT_TESTS)
        AZ_COMMON_KV_TEST=$(Whitelist_Bedrock.AZ_COMMON_KV_TEST)
        mkdir -p $(Pipeline.Workspace)/variables
        echo "Whitelisting Integration Test Values 1. ALL_TESTS: $ALL_IT_TESTS 2. AZ_SIMPLE: $AZ_SIMPLE_TEST 3. AZ_COMMON: $AZ_COMMON_KV_TEST 4. AZ_MC: $AZ_COMMON_MC_TEST"
        echo "$ALL_IT_TESTS" > $(Pipeline.Workspace)/variables/ALL_IT_TESTS
        echo "$AZ_SIMPLE_TEST" > $(Pipeline.Workspace)/variables/AZ_SIMPLE_TEST
        echo "$AZ_COMMON_KV_TEST" > $(Pipeline.Workspace)/variables/AZ_COMMON_KV_TEST
        echo "$AZ_COMMON_MC_TEST" > $(Pipeline.Workspace)/variables/AZ_COMMON_MC_TEST
      displayName: Exporting Integration Test Trigger Variables to Pipeline Workspace
    - publish: $(Pipeline.Workspace)/variables
      artifact: variables
  - job: Bedrock_Test_SIMPLE
    displayName: Bedrock_Build_Azure_Simple
    dependsOn: Bedrock_Init_Validate
    condition: and(succeeded(), or(eq(dependencies.Bedrock_Init_Validate.outputs['Whitelist_Bedrock.AZ_SIMPLE_TEST'], 'true'), eq(dependencies.Bedrock_Init_Validate.outputs['Whitelist_Bedrock.ALL_IT_TESTS'], 'true')))
    timeoutInMinutes: 60
    pool:
      vmImage: 'Ubuntu-16.04'
      timeoutInMinutes: 60
    steps:
      - template: bedrock-whitelist-artifact-embed.yml
      - template: bedrock-test-init.yml
      - script: |
          ssh-keygen -f id_rsa -t rsa -N "bedrock@microsoft.com"
          export ssh_key=$(readlink -f id_rsa.pub)
          export public_key=$(cat id_rsa.pub)
          find $(modulePath)/cluster/environments/azure-simple -type f -name '*.tf' -exec sed -i 's/github.com\/Microsoft\/bedrock\/cluster/..\/../g' {} \;
          go test -v -run TestIT_Bedrock_AzureSimple_Test -timeout 99999s
        env:
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_TENANT_ID: $(ARM_TENANT_ID)
          ARM_BACKEND_STORAGE_NAME: $(ARM_BACKEND_STORAGE_NAME)
          ARM_BACKEND_STORAGE_KEY: $(ARM_BACKEND_STORAGE_KEY)
          ARM_BACKEND_STORAGE_CONTAINER: $(ARM_BACKEND_STORAGE_CONTAINER)
        workingDirectory: '$(modulePath)/test'
        displayName: 'Integration Test: Bedrock_Azure-Simple '

  - job: Bedrock_Test_KEYVAULT
    displayName: Bedrock_Build_Azure_Single_KeyVault
    dependsOn: Bedrock_Init_Validate
    condition: and(succeeded(), or(eq(dependencies.Bedrock_Init_Validate.outputs['Whitelist_Bedrock.AZ_COMMON_KV_TEST'], 'true'), eq(dependencies.Bedrock_Init_Validate.outputs['Whitelist_Bedrock.ALL_IT_TESTS'], 'true')))
    timeoutInMinutes: 60
    pool:
      vmImage: 'Ubuntu-16.04'
      timeoutInMinutes: 60
    variables:
      GOBIN:  '$(GOPATH)/bin' # Go binaries path
      GOROOT: '/usr/local/go1.13' # Go installation path
      GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
      modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

    steps:
    - template: bedrock-whitelist-artifact-embed.yml
    - template: bedrock-test-init.yml
    - script: |
        ssh-keygen -f id_rsa -t rsa -N "bedrock@microsoft.com"
        export ssh_key=$(readlink -f id_rsa.pub)
        export public_key=$(cat id_rsa.pub)
        find $(modulePath)/cluster/environments/azure-single-keyvault -type f -name '*.tf' -exec sed -i 's/github.com\/Microsoft\/bedrock\/cluster/..\/../g' {} \;
        go test -v -run TestIT_Bedrock_AzureCommon_KV_Test -timeout 99999s
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_OBJECT_ID: $(ARM_CLIENT_OBJECT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_BACKEND_STORAGE_NAME: $(ARM_BACKEND_STORAGE_NAME)
        ARM_BACKEND_STORAGE_KEY: $(ARM_BACKEND_STORAGE_KEY)
        ARM_BACKEND_STORAGE_CONTAINER: $(ARM_BACKEND_STORAGE_CONTAINER)
      workingDirectory: '$(modulePath)/test'
      displayName: 'Integration Test: Bedrock_Azure-Common-KeyVault '

  - job: Bedrock_Test_MULTIPLE
    dependsOn: Bedrock_Init_Validate
    condition: and(succeeded(), or(eq(dependencies.Bedrock_Init_Validate.outputs['Whitelist_Bedrock.AZ_COMMON_MC_TEST'], 'true'), eq(dependencies.Bedrock_Init_Validate.outputs['Whitelist_Bedrock.ALL_IT_TESTS'], 'true')))
    displayName: Bedrock_Build_Azure_Multiple_Clusters
    timeoutInMinutes: 60
    pool:
      vmImage: 'Ubuntu-16.04'
      timeoutInMinutes: 60

    variables:
      GOBIN:  '$(GOPATH)/bin' # Go binaries path
      GOROOT: '/usr/local/go1.13' # Go installation path
      GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
      modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

    steps:
    - template: bedrock-whitelist-artifact-embed.yml
    - template: bedrock-test-init.yml
    - script: |
        ssh-keygen -f id_rsa -t rsa -N "bedrock@microsoft.com"
        export ssh_key=$(readlink -f id_rsa.pub)
        export public_key=$(cat id_rsa.pub)
        find $(modulePath)/cluster/environments/azure-multiple-clusters -type f -name '*.tf' -exec sed -i 's/github.com\/Microsoft\/bedrock\/cluster/..\/../g' {} \;
        go test -v -run TestIT_Bedrock_AzureMC_Test -timeout 99999s
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_OBJECT_ID: $(ARM_CLIENT_OBJECT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_BACKEND_STORAGE_NAME: $(ARM_BACKEND_STORAGE_NAME)
        ARM_BACKEND_STORAGE_KEY: $(ARM_BACKEND_STORAGE_KEY)
        ARM_BACKEND_STORAGE_CONTAINER: $(ARM_BACKEND_STORAGE_CONTAINER)
      workingDirectory: '$(modulePath)/test'
      displayName: 'Integration Test: Bedrock_Azure-Common-MultiCluster '
      
